[{"title":"Promise简单总结","date":"2018-05-01T13:25:18.994Z","path":"2018/05/01/Promise简单总结/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Promise代表一个异步操作。具体通过下面的Promise实例来说明。</p>\n<h3 id=\"创建一个Promise实例\"><a href=\"#创建一个Promise实例\" class=\"headerlink\" title=\"创建一个Promise实例\"></a>创建一个Promise实例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyPromise =  new Promise((resolve,reject) =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  if (/*异步操作成功*/) &#123;</span><br><span class=\"line\">    resolve(value)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.then((value) =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Promise构造函数接收一个参数，该参数是一个异步执行的函数。这个函数有两个参数resolve和reject。</li>\n<li>当异步操作执行成功时将会调用resolve，resolve的作用是将promise对象的状态由“未完成”变为“成功”，此时将会调用resolved（成功）状态的回调函数，该回调函数是then方法的第一个参数。该回调函数的参数值可通过设置resolve函数的参数传递过来。</li>\n<li>当异步操作执行失败时将会调用reject，reject的作用是将promise对象的状态由“未完成”变为“失败”，此时将会调用rejected（失败）状态的回调函数，该回调函数是then方法的第二个参数。但一般不会使用then的第二个参数，而是使用catch方法。因为catch方法不仅可以捕获到一开始promise对象中异步操作失败的错误，还能捕获到前面then方法中的错误。</li>\n</ul>\n<h3 id=\"使用Promise封装简化版axios中get方法\"><a href=\"#使用Promise封装简化版axios中get方法\" class=\"headerlink\" title=\"使用Promise封装简化版axios中get方法\"></a>使用Promise封装简化版axios中get方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyAxios = &#123;</span><br><span class=\"line\">  get: function(url) &#123;</span><br><span class=\"line\">    return new Promise((resolve,reject) =&gt; &#123;</span><br><span class=\"line\">      const XHR = new XMLHttpRequest()</span><br><span class=\"line\">      XHR.open(&apos;GET&apos;,url,true)</span><br><span class=\"line\">      XHR.onreadystatechange = function() &#123;</span><br><span class=\"line\">        if (this.readyState !== 4) &#123;</span><br><span class=\"line\">          return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (this.status === 200) &#123;</span><br><span class=\"line\">          resolve(this.response)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          reject(new Error(this.statusText))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      XHR.send()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","tags":[]},{"title":"关于scoped","date":"2018-05-01T12:32:31.521Z","path":"2018/05/01/关于scoped/","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>不得不说，scoped有时算是一个坑，因为在使用vue有时会出现css样式无效的情况，无论使用!important还是行内样式都没有效果。为什么会出现这种情况，我们接下来来讨论下。</p>\n<h3 id=\"scoped原理\"><a href=\"#scoped原理\" class=\"headerlink\" title=\"scoped原理\"></a>scoped原理</h3><p>要讨论上面的情况，首先我们得知道scoped的原理。vue中的组件使用了类似Shadow Dom的思想，使其封闭起来，通过scoped使组件之间的样式不会相互影响。而对于scoped的原理，简单来说就是给组件内的html标签加上一个属性，并且让css选择器也选择上改属性，从而达到样式封装的效果，让css变得有作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.example[data-v-f3f3eg9] &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;example&quot; data-v-f3f3eg9&gt;hi&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关于动态添加的dom\"><a href=\"#关于动态添加的dom\" class=\"headerlink\" title=\"关于动态添加的dom\"></a>关于动态添加的dom</h3><p>样式不生效，很多种情况都是出现在动态添加的dom,这是因为动态添加的dom是不会加上上面所说的属性的，而相应的Css则会加上该属性，所以该样式自然就不会生效了。这时候使用全局样式是经常可以解决问题的，但是需要注意的是，使用全局样式也就意味着有可能会影响到其它的组件。<br>可以在一个组件中同时使用有作用域和无作用域的样式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/* 全局样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">/* 本地样式 */</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关于深度作用选择器\"><a href=\"#关于深度作用选择器\" class=\"headerlink\" title=\"关于深度作用选择器\"></a>关于深度作用选择器</h3><p>scoped中的样式只会影响该组件和子组件的根节点，如果想要让scoped样式也作用于子组件的其它元素，可以使用深度作用选择器。对于有些类似sass的预编译器可能无法解析 &gt;&gt;&gt; ，这时可以使用/deep/操作符取代。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码将会编译成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.a[data-v-f3f3eg9] .b &#123; /* ... */ &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","tags":[]},{"title":"Vue使用axios上传文件","date":"2018-05-01T12:18:47.677Z","path":"2018/05/01/Vue使用axios上传文件/","content":"<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; ref=&quot;myFile&quot; &gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let prod = new FormData()</span><br><span class=\"line\">let file = this.$refs.myFile.files[0]</span><br><span class=\"line\">prod.append(&apos;file&apos;,file)</span><br><span class=\"line\"></span><br><span class=\"line\">let config = &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &apos;Content-Type&apos;: &apos;multipart/form-data&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">axios.post(url,prod,config).then(() =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","excerpt":"","tags":[]},{"title":"vuex的v-model双向绑定","date":"2018-04-30T13:46:09.730Z","path":"2018/04/30/vuex的v-model双向绑定/","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>vuex思想中的state是只能通过mutation改变的，所以如果想让state和v-model进行双向绑定，可以通过调用mutation来改变state，同时配合computed达到双向绑定的效果。</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state: &#123;</span><br><span class=\"line\">  mes: &apos;mes&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mutation: &#123;</span><br><span class=\"line\">  updateMes: (state,data) =&gt; &#123;</span><br><span class=\"line\">    state.mes = data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; v-model=&quot;mes&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  mes: &#123;</span><br><span class=\"line\">    get () &#123;</span><br><span class=\"line\">      return this.$store.state.mes</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set (value) &#123;</span><br><span class=\"line\">      this.$store.commit(&apos;updateMes&apos;,value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","tags":[]}]